import 'package:flareline/pages/test/map_widget/polygon_manager.dart';
import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'pin_style.dart'; // Import the shared file

class PolygonInfoPanel extends StatefulWidget {
  final PolygonData polygon;
  final Function(LatLng) onUpdateCenter;
  final Function(PinStyle) onUpdatePinStyle;

  const PolygonInfoPanel({
    Key? key,
    required this.polygon,
    required this.onUpdateCenter,
    required this.onUpdatePinStyle,
  }) : super(key: key);

  @override
  _PolygonInfoPanelState createState() => _PolygonInfoPanelState();
}

class _PolygonInfoPanelState extends State<PolygonInfoPanel> {
  late TextEditingController latController;
  late TextEditingController lngController;
  PinStyle selectedPinStyle = PinStyle.rice;

  @override
  void initState() {
    super.initState();
    latController =
        TextEditingController(text: widget.polygon.center.latitude.toString());
    lngController =
        TextEditingController(text: widget.polygon.center.longitude.toString());
  }

  @override
  void dispose() {
    latController.dispose();
    lngController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [BoxShadow(color: Colors.black26, blurRadius: 4)],
      ),
      child: ExpansionTile(
        title: Text(
          "Polygon Name: ${widget.polygon.name}",
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        children: [
          // Display Polygon Description (if available)
          if (widget.polygon.description != null)
            Padding(
              padding: EdgeInsets.only(bottom: 10),
              child: Text(
                "Description: ${widget.polygon.description}",
                style: TextStyle(fontSize: 14),
              ),
            ),

          // Display Polygon Color
          Row(
            children: [
              Text(
                "Color: ",
                style: TextStyle(fontSize: 14),
              ),
              Container(
                width: 20,
                height: 20,
                decoration: BoxDecoration(
                  color: widget.polygon.color,
                  shape: BoxShape.circle,
                ),
              ),
            ],
          ),
          SizedBox(height: 10),

          // Display Polygon Vertices
          Text(
            "Vertices:",
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 5),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: widget.polygon.vertices.map((vertex) {
              return Text(
                "Lat: ${vertex.latitude.toStringAsFixed(6)}, Lng: ${vertex.longitude.toStringAsFixed(6)}",
                style: TextStyle(fontSize: 12),
              );
            }).toList(),
          ),
          SizedBox(height: 10),

          // Input fields for updating the center
          TextField(
            controller: latController,
            decoration: InputDecoration(labelText: "Center Latitude"),
            keyboardType: TextInputType.number,
          ),
          TextField(
            controller: lngController,
            decoration: InputDecoration(labelText: "Center Longitude"),
            keyboardType: TextInputType.number,
          ),
          ElevatedButton(
            onPressed: () {
              LatLng newCenter = LatLng(
                double.parse(latController.text),
                double.parse(lngController.text),
              );
              widget.onUpdateCenter(newCenter);
            },
            child: Text("Update Center Pin"),
          ),
          SizedBox(height: 10),

          // Dropdown for selecting pin style
          DropdownButton<PinStyle>(
            value: selectedPinStyle,
            onChanged: (PinStyle? newValue) {
              if (newValue != null) {
                setState(() {
                  selectedPinStyle = newValue;
                });
                widget.onUpdatePinStyle(newValue);
              }
            },
            items: PinStyle.values.map((PinStyle style) {
              return DropdownMenuItem<PinStyle>(
                value: style,
                child: Text(style.toString().split('.').last),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }
}
